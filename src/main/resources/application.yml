build:
  version: ${BUILD_VERSION}

info:
  app:
    name: ${SPRING_APPLICATION_NAME}
    description: "FYP Grading project - Notification Microservice"
    version: ${BUILD_VERSION}

logging:
  level:
    root: INFO

management:
  metrics:
    tags:
      application: ${SPRING_APPLICATION_NAME}

spring:
  datasource:
    url: ${DATABASE_URL}
    username: ${DATABASE_USERNAME}
    password: ${DATABASE_PASSWORD}

  # this will in fact not be used as the service will register with eureka
  # and get its configuration from the config server dynamically in the bootstrap phase (bootstrap.yml)
  config:
    import: "optional:configserver:"

  liquibase:
    enabled: true
    change-log: classpath:liquibase/master.xml

  rabbitmq:
    host: ${RABBITMQ_HOST}
    port: ${RABBITMQ_PORT}
    username: ${RABBITMQ_USERNAME}
    password: ${RABBITMQ_PASSWORD}
    connection-timeout: 10s

  cloud:
    function:
      definition: handleNotification
    stream:
      bindings:
        handleNotification-in-0:
          destination: notification-queue
          group: notification-group
          consumer:
            max-attempts: 5
            back-off-initial-interval: 1000
            back-off-multiplier: 2.0
            back-off-max-interval: 10000
      rabbit:
        bindings:
          handleNotification-in-0:
            consumer:
              auto-bind-dlq: true
              dead-letter-queue-name: dead-letter-queue
              dead-letter-exchange: dead-letter-exchange
              dead-letter-routing-key: dead-letter-routing-key

  security:
    oauth2:
      resourceserver:
        jwt:
          jwk-set-uri: ${AUTH_SERVER_URL}/protocol/openid-connect/certs

server:
  port: ${PORT}